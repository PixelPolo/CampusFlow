import { Program, ProgramsAPI } from "../../../services/api/programs-api";
import { StatusResponse } from "../../../services/api/rest-full.model";

// Tests generated by ChatGPT
describe("ProgramsAPI", () => {
  let programsAPI: ProgramsAPI;

  beforeEach(() => {
    programsAPI = new ProgramsAPI();
    (programsAPI as any).latency = 0;
  });

  // createProgram
  it("should create a new program", async () => {
    const newProgram: Program = {
      name: "Game Development",
      description: "Learn to develop games using modern engines and tools.",
    };

    const response: StatusResponse<Program> = await programsAPI.createProgram(
      newProgram
    );

    expect(response.status).toBe(201);
    expect(response.data).toMatchObject(newProgram);
    expect(response.data.program_id).toBeDefined();
  });

  // getPrograms
  it("should fetch all programs", async () => {
    const response: StatusResponse<Program[]> = await programsAPI.getPrograms();

    expect(response.status).toBe(200);
    expect(response.data.length).toBeGreaterThan(0);
  });

  // getProgramById
  it("should fetch a program by ID", async () => {
    const response: StatusResponse<Program> = await programsAPI.getProgramById(
      1
    );

    expect(response.status).toBe(200);
    expect(response.data.program_id).toBe(1);
  });

  // 404 by ID
  it("should return 404 for a non-existent program by ID", async () => {
    await expect(programsAPI.getProgramById(99999)).rejects.toEqual({
      status: 404,
      message: "Program not found",
    });
  });

  // getProgramByName
  it("should fetch a program by name", async () => {
    const response: StatusResponse<Program> =
      await programsAPI.getProgramByName("Data Science");

    expect(response.status).toBe(200);
    expect(response.data.name).toBe("Data Science");
  });

  // 404 by name
  it("should return 404 for a non-existent program by name", async () => {
    await expect(
      programsAPI.getProgramByName("Nonexistent Program")
    ).rejects.toEqual({
      status: 404,
      message: "Program not found",
    });
  });

  // updateProgram
  it("should update a program", async () => {
    const updatedData = { description: "Updated description" };

    const response: StatusResponse<Program> = await programsAPI.updateProgram(
      1,
      updatedData
    );

    expect(response.status).toBe(200);
    expect(response.data.description).toBe("Updated description");
  });

  // 404 when updateProgram
  it("should return 404 when updating a non-existent program", async () => {
    await expect(
      programsAPI.updateProgram(999, { description: "Test" })
    ).rejects.toEqual({
      status: 404,
      message: "Program not found",
    });
  });

  // deleteProgram
  it("should delete a program", async () => {
    const response: StatusResponse<null> = await programsAPI.deleteProgram(1);

    expect(response.status).toBe(204);
    expect(response.message).toBe("Program deleted successfully");
  });

  // 404 when deleteProgram
  it("should return 404 when deleting a non-existent program", async () => {
    await expect(programsAPI.deleteProgram(999)).rejects.toEqual({
      status: 404,
      message: "Program not found",
    });
  });
});
