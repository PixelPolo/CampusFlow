import { User, UsersAPI } from "../../../services/api/users-api";
import { StatusResponse } from "../../../services/api/rest-full.model";

// Tests generated by ChatGPT
describe("UsersAPI", () => {
  let usersAPI: UsersAPI;

  beforeEach(() => {
    usersAPI = new UsersAPI();
    (usersAPI as any).latency = 0;
  });

  // createUser
  it("should create a new user", async () => {
    const newUser: User = {
      password: "test123",
      roles: ["student"],
      firstName: "Alice",
      lastName: "Wonderland",
      email: "alice@example.com",
    };

    const response: StatusResponse<User> = await usersAPI.createUser(newUser);

    expect(response.status).toBe(201);
    expect(response.data).toMatchObject(newUser);
    expect(response.data.user_id).toBeDefined();
  });

  // getUsers
  it("should fetch all users", async () => {
    const response: StatusResponse<User[]> = await usersAPI.getUsers();

    expect(response.status).toBe(200);
    expect(response.data.length).toBeGreaterThan(0);
  });

  // getUserById
  it("should fetch a user by ID", async () => {
    const response: StatusResponse<User> = await usersAPI.getUserById(1);

    expect(response.status).toBe(200);
    expect(response.data.user_id).toBe(1);
  });

  // 404 by ID
  it("should return 404 for a non-existent user by ID", async () => {
    await expect(usersAPI.getUserById(99999)).rejects.toEqual({
      status: 404,
      message: "User not found",
    });
  });

  // getUserByEmail
  it("should fetch a user by email", async () => {
    const response: StatusResponse<User> = await usersAPI.getUserByEmail(
      "jack.doe@student.com"
    );

    expect(response.status).toBe(200);
    expect(response.data.email).toBe("jack.doe@student.com");
  });

  // 404 by email
  it("should return 404 for a non-existent user by email", async () => {
    await expect(
      usersAPI.getUserByEmail("nonexistent@example.com")
    ).rejects.toEqual({
      status: 404,
      message: "User not found",
    });
  });

  // updateUser
  it("should update a user", async () => {
    const updatedData = { firstName: "UpdatedName" };

    const response: StatusResponse<User> = await usersAPI.updateUser(
      1,
      updatedData
    );

    expect(response.status).toBe(200);
    expect(response.data.firstName).toBe("UpdatedName");
  });

  // 404 when updateUser
  it("should return 404 when updating a non-existent user", async () => {
    await expect(
      usersAPI.updateUser(999, { firstName: "Test" })
    ).rejects.toEqual({
      status: 404,
      message: "User not found",
    });
  });

  // deleteUser
  it("should delete a user", async () => {
    const response: StatusResponse<null> = await usersAPI.deleteUser(1);

    expect(response.status).toBe(204);
    expect(response.message).toBe("User deleted successfully");
  });

  // 404 when deleteUser
  it("should return 404 when deleting a non-existent user", async () => {
    await expect(usersAPI.deleteUser(999)).rejects.toEqual({
      status: 404,
      message: "User not found",
    });
  });
});
