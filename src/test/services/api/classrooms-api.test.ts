import { Classroom, ClassroomAPI } from "../../../services/api/classrooms-api";
import { StatusResponse } from "../../../services/api/rest-full.model";

// Tests generated by ChatGPT
describe("ClassroomAPI", () => {
  let classroomAPI: ClassroomAPI;

  beforeEach(() => {
    classroomAPI = new ClassroomAPI();
    (classroomAPI as any).latency = 0;
  });

  // createClassroom
  it("should create a new classroom", async () => {
    const newClassroom: Classroom = {
      classroom_id: 0,
      name: "Language Lab",
      capacity: 20,
    };

    const response: StatusResponse<Classroom> =
      await classroomAPI.createClassroom(newClassroom);

    expect(response.status).toBe(201);
    expect(response.data).toMatchObject(newClassroom);
    expect(response.data.classroom_id).toBeDefined();
  });

  // getClassroom
  it("should fetch all classrooms", async () => {
    const response: StatusResponse<Classroom[]> =
      await classroomAPI.getClassrooms();

    expect(response.status).toBe(200);
    expect(response.data.length).toBeGreaterThan(0);
  });

  // getClassroomById
  it("should fetch a classroom by ID", async () => {
    const response: StatusResponse<Classroom> =
      await classroomAPI.getClassroomById(1);

    expect(response.status).toBe(200);
    expect(response.data.classroom_id).toBe(1);
  });

  // 404 by ID
  it("should return 404 for a non-existent classroom by ID", async () => {
    await expect(classroomAPI.getClassroomById(99999)).rejects.toEqual({
      status: 404,
      message: "Classroom not found",
    });
  });

  // getClassroomByName
  it("should fetch a classroom by name", async () => {
    const response: StatusResponse<Classroom> =
      await classroomAPI.getClassroomByName("Science Lab");

    expect(response.status).toBe(200);
    expect(response.data.name).toBe("Science Lab");
  });

  // 404 by name
  it("should return 404 for a non-existent classroom by name", async () => {
    await expect(
      classroomAPI.getClassroomByName("Nonexistent Classroom")
    ).rejects.toEqual({
      status: 404,
      message: "Classroom not found",
    });
  });

  // updateClassroom
  it("should update a classroom", async () => {
    const updatedData = { capacity: 50 };

    const response: StatusResponse<Classroom> =
      await classroomAPI.updateClassroom(1, updatedData);

    expect(response.status).toBe(200);
    expect(response.data.capacity).toBe(50);
  });

  // 404 when updateClassroom
  it("should return 404 when updating a non-existent classroom", async () => {
    await expect(
      classroomAPI.updateClassroom(999, { capacity: 60 })
    ).rejects.toEqual({
      status: 404,
      message: "Classroom not found",
    });
  });

  // deleteClassroom
  it("should delete a classroom", async () => {
    const response: StatusResponse<null> = await classroomAPI.deleteClassroom(
      1
    );

    expect(response.status).toBe(204);
    expect(response.message).toBe("Classroom deleted successfully");
  });

  // 404 when deleteClassroom
  it("should return 404 when deleting a non-existent classroom", async () => {
    await expect(classroomAPI.deleteClassroom(999)).rejects.toEqual({
      status: 404,
      message: "Classroom not found",
    });
  });
});
